import logging
from aiogram import Router, F, types
from logging import Logger
logger = logging.getLogger("handlers")
logger.setLevel(logging.INFO)
handler = logging.StreamHandler()
formatter = logging.Formatter('[%(asctime)s] %(levelname)s %(name)s: %(message)s')
handler.setFormatter(formatter)
if not logger.hasHandlers():
    logger.addHandler(handler)
from aiogram.filters import CommandStart, Command
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram import Bot

router = Router()

from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import os

ADMINS = [int(x) for x in os.getenv("ADMINS", "").split(",") if x]

def get_main_menu(is_admin: bool = False):
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    buttons = [
        [KeyboardButton(text="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ üìù"), KeyboardButton(text="–ó–∞–º–µ–Ω—ã ‚úèÔ∏è")],
        [KeyboardButton(text="–í—Ä–µ–º—è üïí"), KeyboardButton(text="–ü—Ä–æ—Ñ–∏–ª—å üßë")]
    ]
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if is_admin:
        buttons.append([KeyboardButton(text="–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å üõ†")])
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True, input_field_placeholder="–ù–ö–ü–¢–∏–£ –õ—É—á—à–∏–π")

class ProfileStates(StatesGroup):
    choosing_group = State()

@router.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext, bot: Bot, pool=None):
    try:
        is_admin = message.from_user.id in ADMINS
        menu = get_main_menu(is_admin)
        builder = InlineKeyboardBuilder()
        builder.button(text="üìö –í—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É", callback_data="show_groups")
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∫–æ–ª–ª–µ–¥–∂–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
            reply_markup=menu
        )
        await message.answer(
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –≤–∞—à—É –≥—Ä—É–ø–ø—É:",
            reply_markup=builder.as_markup()
        )
        logger.info(f"[cmd_start] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª –±–æ—Ç–∞")
    except Exception as e:
        logger.error(f"[cmd_start] –û—à–∏–±–∫–∞: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@router.message(F.text == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ üìù")
@router.message(Command("schedule"))
async def main_schedule(message: types.Message, bot, db=None):
    try:
        if not db:
            await message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            logger.error(f"[main_schedule] –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            return
        user = await db.fetchrow("SELECT group_name FROM users WHERE user_id = $1", message.from_user.id)
        if not user or not user['group_name']:
            builder = InlineKeyboardBuilder()
            builder.button(text="üìö –í—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É", callback_data="show_groups")
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É:", reply_markup=builder.as_markup())
            logger.info(f"[main_schedule] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–µ –≤—ã–±—Ä–∞–ª –≥—Ä—É–ø–ø—É")
            return
        group = user['group_name']
        builder = InlineKeyboardBuilder()
        builder.button(text="–°–µ–≥–æ–¥–Ω—è", callback_data=f"schedule_{group}_today")
        builder.button(text="–ó–∞–≤—Ç—Ä–∞", callback_data=f"schedule_{group}_tomorrow")
        builder.button(text="–ù–µ–¥–µ–ª—è", callback_data=f"schedule_{group}_week")
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:", reply_markup=builder.as_markup())
        logger.info(f"[main_schedule] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {group}")
    except Exception as e:
        logger.error(f"[main_schedule] –û—à–∏–±–∫–∞: {e}")

@router.message(F.text == "–ó–∞–º–µ–Ω—ã ‚úèÔ∏è")
async def main_replacements(message: types.Message, bot, db=None):
    try:
        if not db:
            await message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            logger.error(f"[main_replacements] –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            return
        user = await db.fetchrow("SELECT group_name FROM users WHERE user_id = $1", message.from_user.id)
        if not user or not user['group_name']:
            builder = InlineKeyboardBuilder()
            builder.button(text="üìö –í—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É", callback_data="show_groups")
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É:", reply_markup=builder.as_markup())
            logger.info(f"[main_replacements] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–µ –≤—ã–±—Ä–∞–ª –≥—Ä—É–ø–ø—É")
            return
        group = user['group_name']
        replacements_data = fetch_replacements()
        if not replacements_data or not isinstance(replacements_data, dict) or group not in replacements_data:
            await message.answer("‚úÖ –ó–∞–º–µ–Ω –¥–ª—è –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã –Ω–µ—Ç")
            logger.info(f"[main_replacements] –ù–µ—Ç –∑–∞–º–µ–Ω –¥–ª—è –≥—Ä—É–ø–ø—ã {group}")
            return
        if not isinstance(replacements_data[group], dict):
            await message.answer("‚úÖ –ó–∞–º–µ–Ω –¥–ª—è –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã –Ω–µ—Ç")
            logger.info(f"[main_replacements] –ù–µ—Ç –∑–∞–º–µ–Ω –¥–ª—è –≥—Ä—É–ø–ø—ã {group}")
            return
        text = f"üîÑ –ó–∞–º–µ–Ω—ã –¥–ª—è –≥—Ä—É–ø–ø—ã {group}:\n\n"
        for date, replacements in replacements_data[group].items():
            if not isinstance(replacements, (list, tuple)):
                continue
            text += f"üìÖ {date}:\n"
            for rep in replacements:
                if not isinstance(rep, dict):
                    continue
                text += f"{'_' * 7} –ó–∞–Ω—è—Ç–∏–µ ‚Ññ{rep.get('lesson', '')} {'_' * 7}\n"
                text += f"üìö –ü—Ä–µ–¥–º–µ—Ç: {rep.get('subject', '')}\n"
                if rep.get('teacher'):
                    text += f"üë§ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {rep.get('teacher', '')}\n"
                text += f"üö™ –ö–∞–±–∏–Ω–µ—Ç: {rep.get('room', '')}\n\n"
        await message.answer(text)
        logger.info(f"[main_replacements] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∑–∞–º–µ–Ω—ã –¥–ª—è –≥—Ä—É–ø–ø—ã {group}")
    except Exception as e:
        logger.error(f"[main_replacements] –û—à–∏–±–∫–∞: {e}")

from datetime import datetime
from .parsers.lesson_times import get_current_lesson_info, get_schedule_string

@router.message(F.text == "–í—Ä–µ–º—è üïí")
async def main_time(message: types.Message, bot):
    weekday = datetime.now().weekday()
    current_info = get_current_lesson_info()
    schedule = get_schedule_string(weekday)
    
    text = f"{current_info}\n\n{schedule}"
    await message.answer(text)


@router.message(F.text == "–ü—Ä–æ—Ñ–∏–ª—å üßë")
@router.message(Command("profile"))
async def main_profile(message: types.Message, bot, db=None):
    if not db:
        await message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return
    user = await db.fetchrow("SELECT group_name FROM users WHERE user_id = $1", message.from_user.id)
    if not user or not user['group_name']:
        await message.answer("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É. –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É —á–µ—Ä–µ–∑ –º–µ–Ω—é.")
        return
    builder = InlineKeyboardBuilder()
    builder.button(text="–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data="show_groups")
    await message.answer(f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n–ì—Ä—É–ø–ø–∞: <b>{user['group_name']}</b>", reply_markup=builder.as_markup(), parse_mode="HTML")

@router.message(F.text == "–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å üõ†")
async def main_admin_panel(message: types.Message, bot):
    if message.from_user.id in ADMINS:
        await message.answer("üõ† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stats –∏ /groups –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
    else:
        await message.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤!")

GROUPS_PER_PAGE = 15

@router.callback_query(F.data.startswith("page_"))
@router.callback_query(F.data == "show_groups")
async def show_groups_list(callback: types.CallbackQuery, state: FSMContext, db=None):
    try:
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
        await callback.answer()
        
        current_page = 0
        if callback.data.startswith("page_"):
            current_page = int(callback.data.split("_")[1])

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –∏–∑ –±–∞–∑—ã
        if not db:
            await callback.message.edit_text("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
            
        groups = await db.fetch("SELECT name FROM groups ORDER BY name")
    except Exception as e:
        logging.error(f"Error in show_groups_list: {e}")
        try:
            await callback.message.edit_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        except:
            pass
        return
            
    total_groups = len(groups)
    total_pages = (total_groups + GROUPS_PER_PAGE - 1) // GROUPS_PER_PAGE
    
    # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = current_page * GROUPS_PER_PAGE
    end_idx = min(start_idx + GROUPS_PER_PAGE, total_groups)
    current_groups = groups[start_idx:end_idx]
    
    builder = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≥—Ä—É–ø–ø, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –Ω–∞ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
    mid_point = (len(current_groups) + 1) // 2
    left_column = current_groups[:mid_point]
    right_column = current_groups[mid_point:]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–ø–∞—Ä–Ω–æ –∏–∑ –ª–µ–≤–æ–π –∏ –ø—Ä–∞–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏
    for i in range(max(len(left_column), len(right_column))):
        row_buttons = []
        if i < len(left_column):
            row_buttons.append(InlineKeyboardButton(
                text=left_column[i]['name'],
                callback_data=f"group_{left_column[i]['name']}"
            ))
        if i < len(right_column):
            row_buttons.append(InlineKeyboardButton(
                text=right_column[i]['name'],
                callback_data=f"group_{right_column[i]['name']}"
            ))
        builder.row(*row_buttons)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    nav_buttons = []
    if current_page > 0:
        nav_buttons.append(InlineKeyboardButton(
            text="‚óÄÔ∏è",
            callback_data=f"page_{current_page-1}"
        ))
    if current_page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton(
            text="‚ñ∂Ô∏è",
            callback_data=f"page_{current_page+1}"
        ))
    if nav_buttons:
        builder.row(*nav_buttons)
    
    page_info = f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page + 1} –∏–∑ {total_pages}"
    
    await callback.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É –∏–∑ —Å–ø–∏—Å–∫–∞:\n{page_info}",
        reply_markup=builder.as_markup()
    )

from .parsers.schedule import fetch_schedule, fetch_replacements, format_day_schedule

def get_schedule_text(group: str, day: str = None, date_str: str = None, lessons: list = None, last_update=None) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã (–±–µ–∑ –∑–∞–º–µ–Ω), —Ñ–æ—Ä–º–∞—Ç —Å —ç–º–æ–¥–∑–∏ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º"""
    from .parsers.lesson_times import LESSON_TIMES, WEEKDAY_TIMES, SATURDAY_TIMES
    from datetime import datetime
    schedule_data = fetch_schedule()
    
    if not schedule_data or not isinstance(schedule_data, dict):
        return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"
        
    if group not in schedule_data:
        return "‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å –≤—Ä–µ–º–µ–Ω–∏
    if day == '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫':
        times_dict = LESSON_TIMES
    elif day == '–°—É–±–±–æ—Ç–∞':
        times_dict = SATURDAY_TIMES
    else:
        times_dict = WEEKDAY_TIMES
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    if date_str:
        lines = [f"üìÖ {date_str} | {day}"]
    else:
        lines = [f"üìÖ {day}"]
    group_data = schedule_data.get(group) if isinstance(schedule_data, dict) else None
    if not isinstance(group_data, dict):
        return "‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: –µ—Å–ª–∏ group_data[day] ‚Äî —Å–ª–æ–≤–∞—Ä—å —Å –Ω–µ–¥–µ–ª—è–º–∏, –±–µ—Ä—ë–º —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
    from datetime import datetime
    try:
        from zoneinfo import ZoneInfo
        tz_msk = ZoneInfo("Europe/Moscow")
    except ImportError:
        from pytz import timezone
        tz_msk = timezone("Europe/Moscow")
    now_msk = datetime.now(tz_msk)
    iso_week = now_msk.isocalendar().week
    week_number = 2 if iso_week % 2 == 0 else 1
    lessons_list = []
    if lessons is not None and isinstance(lessons, list):
        lessons_list = [l for l in lessons if isinstance(l, dict)]
    else:
        day_data = group_data.get(day)
        if isinstance(day_data, dict):
            # –í–ª–æ–∂–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {1: [...], 2: [...]}
            lessons_list = [l for l in day_data.get(week_number, []) if isinstance(l, dict)]
        elif isinstance(day_data, list):
            lessons_list = [l for l in day_data if isinstance(l, dict)]
        else:
            lessons_list = []
    num_emoji = ["1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£", "5Ô∏è‚É£", "6Ô∏è‚É£", "7Ô∏è‚É£", "8Ô∏è‚É£"]
    for lesson in lessons_list:
        if not isinstance(lesson, dict):
            continue
        subject = lesson.get('subject', '').strip()
        teacher = lesson.get('teacher', '').strip()
        room = lesson.get('room', '').strip() or lesson.get('classroom', '').strip()
        start_time = lesson.get('start_time', '').strip()
        end_time = lesson.get('end_time', '').strip()
        lesson_number = lesson.get('lesson_number')
        if not subject or subject == "-----":
            continue
        if start_time and end_time:
            time_str = f"{start_time} - {end_time}"
        else:
            time_key = lesson.get('time', '').strip()
            time_str = times_dict.get(time_key, time_key) if isinstance(times_dict, dict) else str(time_key)
        if lesson_number and isinstance(lesson_number, int) and 1 <= lesson_number <= len(num_emoji):
            num = num_emoji[lesson_number-1]
        else:
            num = str(lesson_number) if lesson_number else ""
        room_str = ""
        if room:
            if any(x in room.lower() for x in ['–æ–±—â', '–æ–±—â–µ–∂–∏—Ç–∏–µ']):
                room_str = "–û–±—â–µ–∂–∏—Ç–∏–µ"
            elif room.lower().startswith('–∫–∞–±.'):
                room_str = room
            else:
                room_str = f"–ö–∞–±. {room}"
        lines.append(f"{num} {subject} | {time_str}")
        if teacher:
            lines.append(f"üë§ {teacher}")
        if room_str:
            lines.append(f"üö™ {room_str}")
        lines.append("")
    if last_update:
        lines.append(f"üïí –û–±–Ω–æ–≤–ª–µ–Ω–æ: {last_update.strftime('%d.%m.%Y %H:%M')}")
    return '\n'.join(lines)

@router.callback_query(F.data.startswith("group_"))
async def choose_group(callback: types.CallbackQuery, state: FSMContext, db=None):
    try:
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
        await callback.answer("‚è≥ –°–æ—Ö—Ä–∞–Ω—è—é –≤—ã–±–æ—Ä...")
        
        group = callback.data.replace("group_", "")
        
        if not db:
            await callback.message.edit_text("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
        group_exists = await db.fetchval("SELECT name FROM groups WHERE name = $1", group)
        if not group_exists:
            await callback.message.edit_text("‚ùå –í—ã–±—Ä–∞–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        async with db.transaction():
            await db.execute(
                """
                INSERT INTO users (user_id, group_name) 
                VALUES ($1, $2)
                ON CONFLICT (user_id) DO UPDATE SET group_name = $2
                """,
                callback.from_user.id, group
            )
            
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        await callback.answer("‚úÖ –ì—Ä—É–ø–ø–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!", show_alert=True)
            
    except Exception as e:
        logging.error(f"Error in choose_group: {e}")
        try:
            await callback.message.edit_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        except:
            pass
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    builder = InlineKeyboardBuilder()
    builder.button(text="üìã –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"schedule_{group}")
    builder.button(text="üìö –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –≥—Ä—É–ø–ø—É", callback_data="show_groups")
    
    await callback.message.edit_text(
        f"‚úÖ –í–∞—à–∞ –≥—Ä—É–ø–ø–∞: <b>{group}</b>\n"
        f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )
    await state.clear()


@router.callback_query(F.data.startswith("schedule_"))
async def show_schedule(callback: types.CallbackQuery, state: FSMContext, pool=None):
    from datetime import datetime, timedelta
    try:
        from zoneinfo import ZoneInfo
        tz_msk = ZoneInfo("Europe/Moscow")
    except ImportError:
        from pytz import timezone
        tz_msk = timezone("Europe/Moscow")
    now_msk = datetime.now(tz_msk)
    today = now_msk
    tomorrow = today + timedelta(days=1)
    data = callback.data.split("_")
    group = data[1]
    view_type = data[2] if len(data) > 2 else "today"
    await callback.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...")

    try:
        schedule_data = fetch_schedule()
        if not schedule_data or not isinstance(schedule_data, dict):
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
            logging.error(f"[show_schedule] schedule_data invalid for group {group}")
            return

        weekday_map = {
            0: '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
            1: '–í—Ç–æ—Ä–Ω–∏–∫',
            2: '–°—Ä–µ–¥–∞',
            3: '–ß–µ—Ç–≤–µ—Ä–≥',
            4: '–ü—è—Ç–Ω–∏—Ü–∞',
            5: '–°—É–±–±–æ—Ç–∞',
            6: '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
        }

        if view_type == "today":
            day = weekday_map[today.weekday()]
            if today.weekday() == 6:
                day = "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"
            date_str = today.strftime('%d.%m.%Y')
            group_data = schedule_data.get(group) if isinstance(schedule_data, dict) else None
            lessons = group_data.get(day, []) if isinstance(group_data, dict) else []
            last_update = today
            if pool:
                async with pool.acquire() as conn:
                    update_time = await conn.fetchval(
                        "SELECT updated_at FROM schedule_updates ORDER BY updated_at DESC LIMIT 1"
                    )
                    if update_time:
                        last_update = update_time
            schedule_text = get_schedule_text(group, day, date_str, lessons, last_update)
        elif view_type == "tomorrow":
            day = weekday_map[tomorrow.weekday()]
            if tomorrow.weekday() == 6:
                day = "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"
            date_str = tomorrow.strftime('%d.%m.%Y')
            group_data = schedule_data.get(group) if isinstance(schedule_data, dict) else None
            lessons = group_data.get(day, []) if isinstance(group_data, dict) else []
            last_update = today
            if pool:
                async with pool.acquire() as conn:
                    update_time = await conn.fetchval(
                        "SELECT updated_at FROM schedule_updates ORDER BY updated_at DESC LIMIT 1"
                    )
                    if update_time:
                        last_update = update_time
            schedule_text = get_schedule_text(group, day, date_str, lessons, last_update)
        else:
            week_days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞']
            texts = []
            last_update = today
            if pool:
                async with pool.acquire() as conn:
                    update_time = await conn.fetchval(
                        "SELECT updated_at FROM schedule_updates ORDER BY updated_at DESC LIMIT 1"
                    )
                    if update_time:
                        last_update = update_time
            for d in week_days:
                group_data = schedule_data.get(group) if isinstance(schedule_data, dict) else None
                lessons = group_data.get(d, []) if isinstance(group_data, dict) else []
                texts.append(get_schedule_text(group, d, None, lessons, last_update))
            schedule_text = '\n'.join(texts)

        builder = InlineKeyboardBuilder()
        if view_type == "today":
            builder.button(text="–ù–∞ –∑–∞–≤—Ç—Ä–∞ ‚û°Ô∏è", callback_data=f"schedule_{group}_tomorrow")
            builder.button(text="–ù–∞ –Ω–µ–¥–µ–ª—é üìÖ", callback_data=f"schedule_{group}_week")
        elif view_type == "tomorrow":
            builder.button(text="‚¨ÖÔ∏è –ù–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data=f"schedule_{group}_today")
            builder.button(text="–ù–∞ –Ω–µ–¥–µ–ª—é üìÖ", callback_data=f"schedule_{group}_week")
        else:
            builder.button(text="‚¨ÖÔ∏è –ù–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data=f"schedule_{group}_today")
            builder.button(text="–ù–∞ –∑–∞–≤—Ç—Ä–∞ ‚û°Ô∏è", callback_data=f"schedule_{group}_tomorrow")

        try:
            await callback.message.edit_text(
                schedule_text,
                reply_markup=builder.as_markup(),
                parse_mode="HTML"
            )
        except Exception as e:
            logging.error(f"[show_schedule] Error sending schedule for group {group}: {e}")
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logging.error(f"[show_schedule] Fatal error for group {group}: {e}")
        try:
            await callback.message.edit_text("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except:
            pass

@router.message(Command("stats"))
async def admin_stats(message: types.Message, db=None):
    if message.from_user.id not in ADMINS:
        await message.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤!")
        return
    if not db:
        await message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return
    users_count = await db.fetchval("SELECT COUNT(*) FROM users")
    groups_count = await db.fetchval("SELECT COUNT(*) FROM groups")
    teachers_count = await db.fetchval("SELECT COUNT(*) FROM users WHERE role='teacher'")
    students_count = await db.fetchval("SELECT COUNT(*) FROM users WHERE role='student'")
    last_update = await db.fetchval("SELECT updated_at FROM schedule_updates ORDER BY updated_at DESC LIMIT 1")
    await message.answer(
        f"<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{users_count}</b>\n"
        f"–ì—Ä—É–ø–ø: <b>{groups_count}</b>\n"
        f"–£—á–∏—Ç–µ–ª–µ–π: <b>{teachers_count}</b>\n"
        f"–°—Ç—É–¥–µ–Ω—Ç–æ–≤: <b>{students_count}</b>\n"
        f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: <b>{last_update}</b>",
        parse_mode="HTML"
    )

# @router.message(Command("groups"))
# –£–¥–∞–ª–µ–Ω–æ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é
