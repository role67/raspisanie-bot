import logging
from aiogram import Router, F, types
from aiogram.filters import CommandStart, Command
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram import Bot

router = Router()

from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import os

ADMINS = [int(x) for x in os.getenv("ADMINS", "").split(",") if x]

def get_main_menu(is_admin: bool = False):
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    buttons = [
        [KeyboardButton(text="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ üìù"), KeyboardButton(text="–ó–∞–º–µ–Ω—ã ‚úèÔ∏è")],
        [KeyboardButton(text="–í—Ä–µ–º—è üïí"), KeyboardButton(text="–ü—Ä–æ—Ñ–∏–ª—å üßë")]
    ]
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if is_admin:
        buttons.append([KeyboardButton(text="–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å üõ†")])
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True, input_field_placeholder="–ù–ö–ü–¢–∏–£ –õ—É—á—à–∏–π")

class ProfileStates(StatesGroup):
    choosing_group = State()

@router.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext, bot: Bot, pool=None):
    is_admin = message.from_user.id in ADMINS
    menu = get_main_menu(is_admin)
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã
    builder = InlineKeyboardBuilder()
    builder.button(text="üìö –í—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É", callback_data="show_groups")
    
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∫–æ–ª–ª–µ–¥–∂–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=menu
    )
    await message.answer(
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –≤–∞—à—É –≥—Ä—É–ø–ø—É:",
        reply_markup=builder.as_markup()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@router.message(F.text == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ üìù")
@router.message(Command("schedule"))
async def main_schedule(message: types.Message, bot, db=None):
    if not db:
        await message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return
    user = await db.fetchrow("SELECT group_name FROM users WHERE user_id = $1", message.from_user.id)
    if not user or not user['group_name']:
        builder = InlineKeyboardBuilder()
        builder.button(text="üìö –í—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É", callback_data="show_groups")
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É:", reply_markup=builder.as_markup())
        return
    group = user['group_name']
    builder = InlineKeyboardBuilder()
    builder.button(text="–°–µ–≥–æ–¥–Ω—è", callback_data=f"schedule_{group}_today")
    builder.button(text="–ó–∞–≤—Ç—Ä–∞", callback_data=f"schedule_{group}_tomorrow")
    builder.button(text="–ù–µ–¥–µ–ª—è", callback_data=f"schedule_{group}_week")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:", reply_markup=builder.as_markup())

@router.message(F.text == "–ó–∞–º–µ–Ω—ã ‚úèÔ∏è")
async def main_replacements(message: types.Message, bot, db=None):
    if not db:
        await message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return
        
    user = await db.fetchrow("SELECT group_name FROM users WHERE user_id = $1", message.from_user.id)
    if not user or not user['group_name']:
        builder = InlineKeyboardBuilder()
        builder.button(text="üìö –í—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É", callback_data="show_groups")
        await message.answer(
            "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É:",
            reply_markup=builder.as_markup()
        )
        return
        
    # Check replacements for user's group
    group = user['group_name']
    replacements_data = fetch_replacements()
    
    if group not in replacements_data:
        await message.answer("‚úÖ –ó–∞–º–µ–Ω –¥–ª—è –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã –Ω–µ—Ç")
        return
        
    text = f"üîÑ –ó–∞–º–µ–Ω—ã –¥–ª—è –≥—Ä—É–ø–ø—ã {group}:\n\n"
    for date, replacements in replacements_data[group].items():
        text += f"üìÖ {date}:\n"
        for rep in replacements:
            text += f"{'_' * 7} –ó–∞–Ω—è—Ç–∏–µ ‚Ññ{rep['lesson']} {'_' * 7}\n"
            text += f"üìö –ü—Ä–µ–¥–º–µ—Ç: {rep['subject']}\n"
            if rep.get('teacher'):
                text += f"üë§ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {rep['teacher']}\n"
            text += f"üö™ –ö–∞–±–∏–Ω–µ—Ç: {rep['room']}\n\n"
            
    await message.answer(text)

from datetime import datetime
from .parsers.lesson_times import get_current_lesson_info, get_schedule_string

@router.message(F.text == "–í—Ä–µ–º—è üïí")
async def main_time(message: types.Message, bot):
    weekday = datetime.now().weekday()
    current_info = get_current_lesson_info()
    schedule = get_schedule_string(weekday)
    
    text = f"{current_info}\n\n{schedule}"
    await message.answer(text)


@router.message(F.text == "–ü—Ä–æ—Ñ–∏–ª—å üßë")
@router.message(Command("profile"))
async def main_profile(message: types.Message, bot, db=None):
    if not db:
        await message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return
    user = await db.fetchrow("SELECT group_name FROM users WHERE user_id = $1", message.from_user.id)
    if not user or not user['group_name']:
        await message.answer("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É. –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É —á–µ—Ä–µ–∑ –º–µ–Ω—é.")
        return
    builder = InlineKeyboardBuilder()
    builder.button(text="–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data="show_groups")
    await message.answer(f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n–ì—Ä—É–ø–ø–∞: <b>{user['group_name']}</b>", reply_markup=builder.as_markup(), parse_mode="HTML")

@router.message(F.text == "–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å üõ†")
async def main_admin_panel(message: types.Message, bot):
    if message.from_user.id in ADMINS:
        await message.answer("üõ† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stats –∏ /groups –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
    else:
        await message.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤!")

GROUPS_PER_PAGE = 15

@router.callback_query(F.data.startswith("page_"))
@router.callback_query(F.data == "show_groups")
async def show_groups_list(callback: types.CallbackQuery, state: FSMContext, db=None):
    try:
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
        await callback.answer()
        
        current_page = 0
        if callback.data.startswith("page_"):
            current_page = int(callback.data.split("_")[1])

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –∏–∑ –±–∞–∑—ã
        if not db:
            await callback.message.edit_text("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
            
        groups = await db.fetch("SELECT name FROM groups ORDER BY name")
    except Exception as e:
        logging.error(f"Error in show_groups_list: {e}")
        try:
            await callback.message.edit_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        except:
            pass
        return
            
    total_groups = len(groups)
    total_pages = (total_groups + GROUPS_PER_PAGE - 1) // GROUPS_PER_PAGE
    
    # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = current_page * GROUPS_PER_PAGE
    end_idx = min(start_idx + GROUPS_PER_PAGE, total_groups)
    current_groups = groups[start_idx:end_idx]
    
    builder = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≥—Ä—É–ø–ø, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –Ω–∞ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
    mid_point = (len(current_groups) + 1) // 2
    left_column = current_groups[:mid_point]
    right_column = current_groups[mid_point:]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–ø–∞—Ä–Ω–æ –∏–∑ –ª–µ–≤–æ–π –∏ –ø—Ä–∞–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏
    for i in range(max(len(left_column), len(right_column))):
        row_buttons = []
        if i < len(left_column):
            row_buttons.append(InlineKeyboardButton(
                text=left_column[i]['name'],
                callback_data=f"group_{left_column[i]['name']}"
            ))
        if i < len(right_column):
            row_buttons.append(InlineKeyboardButton(
                text=right_column[i]['name'],
                callback_data=f"group_{right_column[i]['name']}"
            ))
        builder.row(*row_buttons)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    nav_buttons = []
    if current_page > 0:
        nav_buttons.append(InlineKeyboardButton(
            text="‚óÄÔ∏è",
            callback_data=f"page_{current_page-1}"
        ))
    if current_page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton(
            text="‚ñ∂Ô∏è",
            callback_data=f"page_{current_page+1}"
        ))
    if nav_buttons:
        builder.row(*nav_buttons)
    
    page_info = f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page + 1} –∏–∑ {total_pages}"
    
    await callback.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É –∏–∑ —Å–ø–∏—Å–∫–∞:\n{page_info}",
        reply_markup=builder.as_markup()
    )

from .parsers.schedule import fetch_schedule, fetch_replacements, format_day_schedule

def get_schedule_text(group: str, day: str = None, date_str: str = None, lessons: list = None, last_update=None) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã (–±–µ–∑ –∑–∞–º–µ–Ω), —Ñ–æ—Ä–º–∞—Ç —Å —ç–º–æ–¥–∑–∏ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º"""
    from .parsers.lesson_times import LESSON_TIMES, WEEKDAY_TIMES, SATURDAY_TIMES
    from datetime import datetime
    schedule_data = fetch_schedule()
    if group not in schedule_data:
        return "‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å –≤—Ä–µ–º–µ–Ω–∏
    if day == '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫':
        times_dict = LESSON_TIMES
    elif day == '–°—É–±–±–æ—Ç–∞':
        times_dict = SATURDAY_TIMES
    else:
        times_dict = WEEKDAY_TIMES
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    if date_str:
        lines = [f"üìÖ {date_str} | {day}\n"]
    else:
        lines = [f"üìÖ {day}\n"]
    lessons = lessons if lessons is not None else schedule_data[group].get(day, [])
    if not lessons:
        lines.append("\n‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    for idx, lesson in enumerate(lessons, 1):
        subject = lesson.get('subject', '').strip()
        teacher = lesson.get('teacher', '').strip()
        room = lesson.get('room', '').strip()
        time = lesson.get('time', '').strip()
        if not subject or subject == "-----":
            continue
        # –í—Ä–µ–º—è –ø–∞—Ä—ã
        time_str = times_dict.get(time, time)
        # –§–æ—Ä–º–∞—Ç –∫–∞–±–∏–Ω–µ—Ç–∞
        if subject.lower().startswith('—Ñ–∏–∑') and teacher and teacher.lower().startswith('–≤–∏–¥—è–∫–æ–≤'):
            room_str = "–û–±—â–µ–∂–∏—Ç–∏–µ"
        elif room and room.lower() in ['–æ–±—â', '–æ–±—â.', '–æ–±—â–∞–≥–∞']:
            room_str = "–û–±—â–µ–∂–∏—Ç–∏–µ"
        elif room:
            room_str = f"–ö–∞–±. {room}"
        else:
            room_str = ""
        # –≠–º–æ–¥–∑–∏ –¥–ª—è –Ω–æ–º–µ—Ä–∞ –ø–∞—Ä—ã
        num_emoji = ["1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£", "5Ô∏è‚É£", "6Ô∏è‚É£", "7Ô∏è‚É£", "8Ô∏è‚É£"]
        num = num_emoji[idx-1] if idx <= len(num_emoji) else f"{idx}"
        lines.append(f"{num} {subject} | {time_str}")
        if teacher:
            lines.append(f"üë§ {teacher}")
        if room_str:
            lines.append(f"üö™ {room_str}")
        lines.append("")
    if last_update:
        lines.append(f"ÔøΩ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {last_update.strftime('%d.%m.%Y %H:%M')}")
    return '\n'.join(lines)

@router.callback_query(F.data.startswith("group_"))
async def choose_group(callback: types.CallbackQuery, state: FSMContext, db=None):
    try:
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
        await callback.answer("‚è≥ –°–æ—Ö—Ä–∞–Ω—è—é –≤—ã–±–æ—Ä...")
        
        group = callback.data.replace("group_", "")
        
        if not db:
            await callback.message.edit_text("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
        group_exists = await db.fetchval("SELECT name FROM groups WHERE name = $1", group)
        if not group_exists:
            await callback.message.edit_text("‚ùå –í—ã–±—Ä–∞–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        async with db.transaction():
            await db.execute(
                """
                INSERT INTO users (user_id, group_name) 
                VALUES ($1, $2)
                ON CONFLICT (user_id) DO UPDATE SET group_name = $2
                """,
                callback.from_user.id, group
            )
            
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        await callback.answer("‚úÖ –ì—Ä—É–ø–ø–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!", show_alert=True)
            
    except Exception as e:
        logging.error(f"Error in choose_group: {e}")
        try:
            await callback.message.edit_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        except:
            pass
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    builder = InlineKeyboardBuilder()
    builder.button(text="üìã –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"schedule_{group}")
    builder.button(text="üìö –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –≥—Ä—É–ø–ø—É", callback_data="show_groups")
    
    await callback.message.edit_text(
        f"‚úÖ –í–∞—à–∞ –≥—Ä—É–ø–ø–∞: <b>{group}</b>\n"
        f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )
    await state.clear()


@router.callback_query(F.data.startswith("schedule_"))
async def show_schedule(callback: types.CallbackQuery, state: FSMContext, pool=None):
    from datetime import datetime, timedelta
    data = callback.data.split("_")
    group = data[1]
    view_type = data[2] if len(data) > 2 else "today"
    await callback.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...")

    schedule_data = fetch_schedule()
    today = datetime.now()
    tomorrow = today + timedelta(days=1)
    weekday_map = {
        0: '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
        1: '–í—Ç–æ—Ä–Ω–∏–∫',
        2: '–°—Ä–µ–¥–∞',
        3: '–ß–µ—Ç–≤–µ—Ä–≥',
        4: '–ü—è—Ç–Ω–∏—Ü–∞',
        5: '–°—É–±–±–æ—Ç–∞',
        6: '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
    }

    if view_type == "today":
        day = weekday_map[today.weekday()]
        if today.weekday() == 6:
            day = "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"
        date_str = today.strftime('%d.%m.%Y')
        lessons = schedule_data.get(group, {}).get(day, [])
        last_update = today
        if pool:
            async with pool.acquire() as conn:
                update_time = await conn.fetchval(
                    "SELECT updated_at FROM schedule_updates ORDER BY updated_at DESC LIMIT 1"
                )
                if update_time:
                    last_update = update_time
        schedule_text = get_schedule_text(group, day, date_str, lessons, last_update)
    elif view_type == "tomorrow":
        day = weekday_map[tomorrow.weekday()]
        if tomorrow.weekday() == 6:
            day = "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"
        date_str = tomorrow.strftime('%d.%m.%Y')
        lessons = schedule_data.get(group, {}).get(day, [])
        last_update = today
        if pool:
            async with pool.acquire() as conn:
                update_time = await conn.fetchval(
                    "SELECT updated_at FROM schedule_updates ORDER BY updated_at DESC LIMIT 1"
                )
                if update_time:
                    last_update = update_time
        schedule_text = get_schedule_text(group, day, date_str, lessons, last_update)
    else:
        week_days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞']
        texts = []
        last_update = today
        if pool:
            async with pool.acquire() as conn:
                update_time = await conn.fetchval(
                    "SELECT updated_at FROM schedule_updates ORDER BY updated_at DESC LIMIT 1"
                )
                if update_time:
                    last_update = update_time
        for d in week_days:
            lessons = schedule_data.get(group, {}).get(d, [])
            texts.append(get_schedule_text(group, d, None, lessons, last_update))
        schedule_text = '\n'.join(texts)

    builder = InlineKeyboardBuilder()
    if view_type == "today":
        builder.button(text="–ù–∞ –∑–∞–≤—Ç—Ä–∞ ‚û°Ô∏è", callback_data=f"schedule_{group}_tomorrow")
        builder.button(text="–ù–∞ –Ω–µ–¥–µ–ª—é üìÖ", callback_data=f"schedule_{group}_week")
    elif view_type == "tomorrow":
        builder.button(text="‚¨ÖÔ∏è –ù–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data=f"schedule_{group}_today")
        builder.button(text="–ù–∞ –Ω–µ–¥–µ–ª—é üìÖ", callback_data=f"schedule_{group}_week")
    else:
        builder.button(text="‚¨ÖÔ∏è –ù–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data=f"schedule_{group}_today")
        builder.button(text="–ù–∞ –∑–∞–≤—Ç—Ä–∞ ‚û°Ô∏è", callback_data=f"schedule_{group}_tomorrow")

    await callback.message.edit_text(
        schedule_text,
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )

@router.message(Command("stats"))
async def admin_stats(message: types.Message, db=None):
    if message.from_user.id not in ADMINS:
        await message.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤!")
        return
    if not db:
        await message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return
    users_count = await db.fetchval("SELECT COUNT(*) FROM users")
    groups_count = await db.fetchval("SELECT COUNT(*) FROM groups")
    await message.answer(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{users_count}</b>\n–ì—Ä—É–ø–ø: <b>{groups_count}</b>", parse_mode="HTML")

@router.message(Command("groups"))
async def admin_groups(message: types.Message, db=None):
    if message.from_user.id not in ADMINS:
        await message.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤!")
        return
    if not db:
        await message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return
    groups = await db.fetch("SELECT name FROM groups ORDER BY name")
    text = "–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø:\n" + "\n".join([g['name'] for g in groups])
    await message.answer(text)
