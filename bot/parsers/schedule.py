import pandas as pd
import requests
import re
from io import BytesIO
from docx import Document
import random
import os
from pathlib import Path
import threading
import logging

SCHEDULE_URL = "https://www.nkptiu.ru/doc/raspisanie/raspisanie.xls"
REPLACEMENTS_URL = "https://www.nkptiu.ru/doc/raspisanie/zameni.docx"

def load_user_agents():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç User-Agent'—ã –∏–∑ —Ñ–∞–π–ª–æ–≤"""
    agents = {
        'windows': [],
        'mac': [],
        'ios': [],
        'android': []
    }
    
    base_path = Path(__file__).parent.parent / 'useragents'
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ 100 –∞–≥–µ–Ω—Ç–æ–≤ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
    for platform in agents.keys():
        file_path = base_path / f"{platform}.txt"
        if file_path.exists():
            with open(file_path, 'r', encoding='utf-8') as f:
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 100 —Å—Ç—Ä–æ–∫, –ø—Ä–æ–ø—É—Å–∫–∞—è –ø—É—Å—Ç—ã–µ
                agents[platform] = [line.strip() for line in f if line.strip()][:100]
    
    return agents


# –ó–∞–≥—Ä—É–∂–∞–µ–º User-Agent'—ã –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
USER_AGENTS = load_user_agents()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
_schedule_cache = None
_schedule_cache_lock = threading.Lock()
_schedule_cache_hash = None

# --- –ù–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä —Å—Ç—Ä–æ–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è ---
def split_subject_teacher(cell: str):

    cell = cell.strip()
    pattern = re.compile(
        r"""
        ^(?P<subject>[–ê-–Ø–∞-—èA-Za-z–Å—ë .\-]+?)\s*
        (?:\((?P<subgroup>\d–ø)\))?\s*
        (?P<teacher>[–ê-–Ø–Å][–∞-—è—ë]+\s[–ê-–Ø–Å]\.[–ê-–Ø–Å]\.)?\s*
        (?P<room>\d{2,4})?
        $
        """, re.VERBOSE)
    match = pattern.match(cell)
    if match:
        subject = (match.group('subject') or '').strip()
        subgroup = (match.group('subgroup') or '').strip()
        teacher = (match.group('teacher') or '').strip()
        room = (match.group('room') or '').strip()
        return subject, teacher, room, subgroup
    # fallback: –ø–æ–ø—ã—Ç–∫–∞ –≤—ã—Ç–∞—â–∏—Ç—å –∫–∞–±–∏–Ω–µ—Ç
    room_match = re.search(r"(\d{2,4})$", cell)
    room = room_match.group(1) if room_match else ''
    teacher_match = re.search(r"([–ê-–Ø–Å][–∞-—è—ë]+\s[–ê-–Ø–Å]\.[–ê-–Ø–Å]\.)", cell)
    teacher = teacher_match.group(1) if teacher_match else ''
    subgroup_match = re.search(r"\((\d–ø)\)", cell)
    subgroup = subgroup_match.group(1) if subgroup_match else ''
    subject = cell
    for part in [teacher, room, f"({subgroup})"]:
        if part:
            subject = subject.replace(part, '').strip()
    subject = re.sub(r"\s+", " ", subject)
    return subject, teacher, room, subgroup

# --- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–Ω—è ---
def format_day_schedule(group_lessons, day, replacements=None, date_str=None, last_update=None):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–Ω—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    """
    try:
        if not isinstance(group_lessons, dict):
            return "‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"
        if not day:
            return "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏"
        if replacements is not None and not isinstance(replacements, list):
            replacements = None
        if date_str and not isinstance(date_str, str):
            try:
                date_str = str(date_str)
            except:
                date_str = None
        from datetime import datetime
        try:
            from zoneinfo import ZoneInfo
            tz_msk = ZoneInfo("Europe/Moscow")
        except ImportError:
            from pytz import timezone
            tz_msk = timezone("Europe/Moscow")
        now_msk = datetime.now(tz_msk)
        weekday = now_msk.weekday()
        iso_week = now_msk.isocalendar().week
        if weekday == 6 and now_msk.hour >= 0:
            week_number = 1 if (iso_week + 1) % 2 != 0 else 2
        else:
            week_number = 2 if iso_week % 2 == 0 else 1
    except Exception:
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"
    from .lesson_times import LESSON_TIMES, WEEKDAY_TIMES, SATURDAY_TIMES
    day_map = {
        '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
        '–í—Ç–æ—Ä–Ω–∏–∫': '–í—Ç–æ—Ä–Ω–∏–∫',
        '–°—Ä–µ–¥–∞': '–°—Ä–µ–¥–∞',
        '–ß–µ—Ç–≤–µ—Ä–≥': '–ß–µ—Ç–≤–µ—Ä–≥',
        '–ü—è—Ç–Ω–∏—Ü–∞': '–ü—è—Ç–Ω–∏—Ü–∞',
        '–°—É–±–±–æ—Ç–∞': '–°—É–±–±–æ—Ç–∞'
    }
    if day == '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫':
        times_dict = LESSON_TIMES
    elif day == '–°—É–±–±–æ—Ç–∞':
        times_dict = SATURDAY_TIMES
    else:
        times_dict = WEEKDAY_TIMES
    try:
        if date_str:
            lines = [f"üìÖ {date_str} | {day_map.get(day, day)}\n"]
        else:
            lines = [f"üìÖ {day_map.get(day, day)}\n"]
        if not group_lessons or day not in group_lessons:
            lines.append("\n‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return '\n'.join(lines)
        lessons = group_lessons.get(day, {}).get(week_number, [])
        if not isinstance(lessons, list):
            lines.append("\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
            return '\n'.join(lines)
        for idx, lesson in enumerate(lessons, 1):
            try:
                if not isinstance(lesson, dict):
                    continue
                subject = lesson.get('subject', '').strip()
                teacher = lesson.get('teacher', '').strip()
                room = lesson.get('room', '').strip()
                time = lesson.get('time', '').strip()
                if not subject or subject == "-----":
                    continue
            except Exception:
                continue
            time_str = times_dict.get(time, time)
            lesson_str = f"{idx}Ô∏è‚É£ {subject} | {time_str}"
            lines.append(lesson_str)
            if teacher:
                lines.append(f"üë§ {teacher}")
            if room:
                lines.append(f"üö™ {room}")
            lines.append("")
    except Exception:
        pass
    try:
        if replacements:
            if not isinstance(replacements, list):
                lines.append("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–º–µ–Ω")
            else:
                lines.append("üîÑ –ó–∞–º–µ–Ω—ã")
                for idx, rep in enumerate(replacements, 1):
                    try:
                        if not isinstance(rep, dict):
                            continue
                        rep_subject = rep.get('subject', '').strip()
                        rep_lesson = rep.get('lesson', '').strip()
                        rep_room = rep.get('room', '').strip()
                        rep_teacher = rep.get('teacher', '').strip()
                        if not rep_subject or not rep_lesson:
                            continue
                        lines.append(f"üìö {rep_subject} –≤–º–µ—Å—Ç–æ {rep_lesson}")
                        if rep_teacher:
                            lines.append(f"üë§ {rep_teacher}")
                        if rep_room:
                            lines.append(f"üö™ –ö–∞–±. {rep_room}")
                        lines.append("")
                    except Exception:
                        continue
    except Exception:
        lines.append("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–º–µ–Ω")
    try:
        if last_update:
            try:
                update_time = last_update.strftime('%d.%m.%Y %H:%M')
                lines.append(f"üïí –û–±–Ω–æ–≤–ª–µ–Ω–æ: {update_time}")
            except Exception:
                lines.append("üïí –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
        lines.append(f"üìÖ {week_number} –Ω–µ–¥–µ–ª—è")
    except Exception:
        pass
    try:
        return '\n'.join(lines)
    except Exception:
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"

def get_random_headers():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π User-Agent –∏ –±–∞–∑–æ–≤—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏"""
    # –í—ã–±–∏—Ä–∞–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É —Å —Ä–∞–∑–Ω—ã–º–∏ –≤–µ—Å–∞–º–∏
    platform = random.choices(
        ['windows', 'mac', 'ios', 'android'],
        weights=[0.4, 0.3, 0.2, 0.1]  # 40% Windows, 30% Mac, 20% iOS, 10% Android
    )[0]
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    agents = USER_AGENTS.get(platform, [])
    
    # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç, –ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∞–≥–µ–Ω—Ç –∏–∑ –ª—é–±–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    if not agents:
        all_agents = []
        for platform_agents in USER_AGENTS.values():
            all_agents.extend(platform_agents)
        user_agent = random.choice(all_agents) if all_agents else (
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 "
            "(KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36"
        )
    else:
        user_agent = random.choice(agents)
    
    return {
        "User-Agent": user_agent,
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8",
        "Accept-Language": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7",
        "Accept-Encoding": "gzip, deflate, br",
        "Connection": "keep-alive",
        "Cache-Control": "no-cache",
        "Pragma": "no-cache"
    }


def process_subject_and_teacher(value):
    """–†–∞–∑–¥–µ–ª—è–µ—Ç –ø—Ä–µ–¥–º–µ—Ç –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏–∑ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    try:
        if not value or pd.isna(value) or str(value).strip().lower() == 'nan':
            return '', ''
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–Ω–∞—á–µ–Ω–∏—è: {e}")
        return '', ''
    
    value = str(value).strip()
    parts = value.split(')')  # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ —Å–∫–æ–±–∫–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–∫–æ–±–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–ú–î–ö.04.01 (–ë–æ–ª–¥–æ–≤—Å–∫–∞—è)")
    if len(parts) > 1:
        subject = parts[0].strip() + ')'
        teacher = parts[1].strip()
        return subject, teacher
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —è–≤–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ —è–∑—ã–∫–∞
    if '(–Ω–µ–º)' in value.lower() or '(–∞–Ω–≥–ª)' in value.lower():
        parts = value.split()
        subject_parts = []
        teacher_parts = []
        found_lang = False
        
        for part in parts:
            if '(–Ω–µ–º)' in part.lower() or '(–∞–Ω–≥–ª)' in part.lower():
                subject_parts.append(part)
                found_lang = True
            elif found_lang:
                teacher_parts.append(part)
            else:
                subject_parts.append(part)
                
        return ' '.join(subject_parts), ' '.join(teacher_parts)
    
    return value, ''

def process_teacher_and_room(value):
    """–†–∞–∑–¥–µ–ª—è–µ—Ç —É—á–∏—Ç–µ–ª—è –∏ –∫–∞–±–∏–Ω–µ—Ç –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
    try:
        if not value or pd.isna(value) or str(value).strip().lower() == 'nan':
            return '', ''
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–Ω–∞—á–µ–Ω–∏—è: {e}")
        return '', ''
        
    value = str(value).strip()
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–µ–∂–∏—Ç–∏—è
    if value.lower() in ['–æ–±—â', '–æ–±—â.', '–æ–±—â–∞–≥–∞']:
        return '', '–û–±—â–µ–∂–∏—Ç–∏–µ'
        
    # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–º–µ—Ä —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä 201-4), —ç—Ç–æ –∫–∞–±–∏–Ω–µ—Ç
    if '-' in value and any(c.isdigit() for c in value) and len(value) <= 7:
        return '', f"–ö–∞–±. {value}"
        
    # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –Ω–æ–º–µ—Ä, —ç—Ç–æ —Ç–æ–∂–µ –∫–∞–±–∏–Ω–µ—Ç
    if value.isdigit() and len(value) <= 4:
        return '', f"–ö–∞–±. {value}"
    
    # –ü—Ä–∏–∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:
    # 1. –§–∞–º–∏–ª–∏—è —Å –∏–Ω–∏—Ü–∏–∞–ª–∞–º–∏ (–ò–≤–∞–Ω–æ–≤ –ò.–ò.)
    if ' ' in value and any(c == '.' for c in value) and value.split()[0].istitle():
        return value, ''
    
    # 2. –ü—Ä–æ—Å—Ç–æ —Ñ–∞–º–∏–ª–∏—è —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã
    if value.istitle() and value.isalpha() and len(value) > 3:
        return value, ''
        
    # 3. –§–∞–º–∏–ª–∏—è —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –±–µ–∑ —Ç–æ—á–µ–∫ (–ò–≤–∞–Ω–æ–≤–∞ –ú–∞—Ä–∏—è)
    if ' ' in value and all(word.istitle() for word in value.split()) and value.replace(' ', '').isalpha():
        return value, ''
    
    # –ò–Ω–∞—á–µ —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ –Ω–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∏ –Ω–µ –∫–∞–±–∏–Ω–µ—Ç
    return '', ''

def fetch_schedule():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏ –ø–∞—Ä—Å–∏—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"""
    global _schedule_cache, _schedule_cache_lock, _schedule_cache_hash
    try:
        with _schedule_cache_lock:
            headers = get_random_headers()
            try:
                resp = requests.get(SCHEDULE_URL, headers=headers, timeout=30)
                resp.raise_for_status()
                if resp.status_code != 200 or len(resp.content) < 1000:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: —Å—Ç–∞—Ç—É—Å={resp.status_code}, –¥–ª–∏–Ω–∞={len(resp.content)}")
                    return {}
                file_hash = hash(resp.content)
                if _schedule_cache is not None and _schedule_cache_hash == file_hash:
                    logging.info("–í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
                    return _schedule_cache.copy() if isinstance(_schedule_cache, dict) else {}
                xls = BytesIO(resp.content)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
                return {}
        try:
            try:
                df = pd.read_excel(xls, engine='xlrd', na_values=[''])
            except Exception as e1:
                xls.seek(0)
                try:
                    df = pd.read_excel(xls, engine='openpyxl', na_values=[''])
                except Exception as e2:
                    logging.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è xls: xlrd={e1}, openpyxl={e2}")
                    return {}
            if df.empty or len(df.columns) < 3:
                logging.error(f"DataFrame –ø—É—Å—Ç–æ–π –∏–ª–∏ –º–∞–ª–æ –∫–æ–ª–æ–Ω–æ–∫: shape={df.shape}, columns={df.columns}")
                return {}
            logging.info(f"DataFrame –∑–∞–≥—Ä—É–∂–µ–Ω: shape={df.shape}, columns={list(df.columns)}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ DataFrame: {e}")
            return {}
        practice_rows = df[df.iloc[:, 0] == "–ü–†–ê–ö–¢–ò–ö–ò"].index
        practice_data = {}
        
        if len(practice_rows) > 0:
            practice_start = practice_rows[0]
            # –ß–∏—Ç–∞–µ–º –ø—Ä–∞–∫—Ç–∏–∫–∏ –ø–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏ "–ü–†–ê–ö–¢–ò–ö–ò"
            for idx, row in df.iloc[practice_start+1:].iterrows():
                try:
                    if pd.notna(row[0]) and str(row[0]).strip():
                        group = str(row[0]).strip()
                        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å—Ç—Ä–æ–∫–∏
                        practice_values = []
                        for i in range(1, len(row)):
                            if pd.notna(row[i]) and str(row[i]).strip():
                                practice_values.append(str(row[i]).strip())
                        
                        # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ —ç—Ç–æ –Ω–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ "–ü–†–ê–ö–¢–ò–ö–ò"
                        if practice_values and group != "–ü–†–ê–ö–¢–ò–ö–ò":
                            practice_info = " ".join(practice_values)
                            if group and practice_info:
                                practice_data[group] = practice_info
                                logging.debug(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∞–∫—Ç–∏–∫–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {group}")
                except (IndexError, TypeError, AttributeError) as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏ –ø—Ä–∞–∫—Ç–∏–∫–∏ {idx}: {e}")
        
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–±—Ä–∞–Ω–æ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–ø—É—Å–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ (–∏–Ω—Ç–µ—Ä–≤–∞–ª–∞)
        if '–ò–Ω—Ç–µ—Ä–≤–∞–ª' in df.columns:
            df['–ò–Ω—Ç–µ—Ä–≤–∞–ª'] = df['–ò–Ω—Ç–µ—Ä–≤–∞–ª'].ffill()
            logging.debug("–ó–∞–ø–æ–ª–Ω–µ–Ω—ã –ø—Ä–æ–ø—É—Å–∫–∏ –≤ —Å—Ç–æ–ª–±—Ü–µ '–ò–Ω—Ç–µ—Ä–≤–∞–ª'")

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–∞ –ø–∞—Ä
        from .lesson_times import LESSON_TIMES, WEEKDAY_TIMES, SATURDAY_TIMES

        schedule_data = {}
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –≥—Ä—É–ø–ø –ø–æ —à–∞–±–ª–æ–Ω—É: –±—É–∫–≤—ã+–¥–µ—Ñ–∏—Å+—Ü–∏—Ñ—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä "–ò–°–ü-21")
        group_cols = [col for col in df.columns 
                     if isinstance(col, str) and 
                     '-' in col and 
                     any(c.isalpha() for c in col) and 
                     any(c.isdigit() for c in col)]
        
        # if not group_cols:
        #     return {}

        for group_col in group_cols:
            schedule_data[group_col] = {}
            try:
                if group_col in practice_data:
                    practice_info = practice_data[group_col]
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∞–∫—Ç–∏–∫–µ –Ω–µ –ø—É—Å—Ç–∞—è
                    if practice_info and practice_info.strip():
                        schedule_data[group_col] = {
                            'practice': [{
                                'is_practice': True,
                                'practice_info': practice_info.strip()
                            }],
                            'updated': True  # –ú–∞—Ä–∫–µ—Ä —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã
                        }
                        logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_col}: {practice_info.strip()}")
                        continue
            except (TypeError, AttributeError) as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_col}: {e}")
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≥—Ä—É–ø–ø—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
            #
            day_col = df.columns[0]
            cabinet_col = df.columns[df.columns.get_loc(group_col) + 1]
            current_day = None
            lesson_counter = 0
            week_lessons = {1: [], 2: []}
            i = 0
            while i < len(df):
                row = df.iloc[i]
                if i >= practice_start if len(practice_rows) > 0 else False:
                    break
                # –ù–æ–≤—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
                if pd.notna(row[day_col]) and str(row[day_col]).strip():
                    if current_day and (week_lessons[1] or week_lessons[2]):
                        if current_day not in schedule_data[group_col]:
                            schedule_data[group_col][current_day] = {1: [], 2: []}
                        schedule_data[group_col][current_day][1].extend(week_lessons[1])
                        schedule_data[group_col][current_day][2].extend(week_lessons[2])
                    current_day = str(row[day_col]).strip()
                    week_lessons = {1: [], 2: []}
                    lesson_counter = 0
                time = str(row.get('–ò–Ω—Ç–µ—Ä–≤–∞–ª', '')).strip()
                cell_value = str(row.get(group_col, '')).strip()
                cabinet_value = str(row.get(cabinet_col, '')).strip()
                # –ü—Ä–æ–ø—É—Å–∫ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫
                if not time or cell_value.lower() == 'nan':
                    i += 1
                    continue
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–º–µ—Ä –ø–∞—Ä—ã
                if time and not any(x in time.lower() for x in ['—Å–Ω–∏–º–∞—é—Ç—Å—è', '–ø—Ä–æ–≤–æ–¥—è—Ç—Å—è']):
                    lesson_counter += 1
                else:
                    i += 1
                    continue

                # –ù–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º: –∏—â–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å '-----' –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä—ã –ø–æ –Ω–µ–¥–µ–ª—è–º
                # –°–æ–±–∏—Ä–∞–µ–º –±–ª–æ–∫ –ø–∞—Ä –¥–ª—è –¥–Ω—è
                day_pairs = []
                day_cabinets = []
                day_times = []
                start_i = i
                while i < len(df):
                    row = df.iloc[i]
                    pair_value = str(row.get(group_col, '')).strip()
                    pair_cabinet = str(row.get(cabinet_col, '')).strip()
                    pair_time = str(row.get('–ò–Ω—Ç–µ—Ä–≤–∞–ª', '')).strip()
                    if not pair_time or pair_value.lower() == 'nan':
                        i += 1
                        continue
                    if pair_value == "-----":
                        break
                    day_pairs.append(pair_value)
                    day_cabinets.append(pair_cabinet)
                    day_times.append(pair_time)
                    i += 1

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å '-----' –≤ —ç—Ç–æ–º –¥–Ω–µ
                has_split = False
                split_index = None
                for idx in range(start_i, i):
                    row = df.iloc[idx]
                    if str(row.get(group_col, '')).strip() == "-----":
                        has_split = True
                        split_index = idx - start_i
                        break

                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä—ã –ø–æ –Ω–µ–¥–µ–ª—è–º
                if has_split:
                    # –ï—Å–ª–∏ '-----' –Ω–∞–¥ –ø—Ä–µ–¥–º–µ—Ç–æ–º (—Ç–æ –µ—Å—Ç—å split_index == 0)
                    if split_index == 0:
                        # 1 –Ω–µ–¥–µ–ª—è ‚Äî –ø–∞—Ä—ã –¥–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è, 2 –Ω–µ–¥–µ–ª—è ‚Äî –ø–æ—Å–ª–µ
                        for j in range(len(day_pairs)):
                            subject, teacher, room, subgroup = split_subject_teacher(day_pairs[j])
                            room_final = room if room else (day_cabinets[j] if day_cabinets[j] and day_cabinets[j].lower() != 'nan' else '‚Äî')
                            lesson_dict = {
                                'lesson_number': j+1,
                                'time': day_times[j],
                                'subject': subject,
                                'teacher': teacher,
                                'room': room_final,
                                'subgroup': subgroup,
                                'week_number': 2 if j >= split_index else 1,
                                'is_subgroup': bool(subgroup),
                                'file_hash': file_hash
                            }
                            if j < split_index:
                                week_lessons[1].append(lesson_dict)
                            else:
                                week_lessons[2].append(lesson_dict)
                    else:
                        # 1 –Ω–µ–¥–µ–ª—è ‚Äî –ø–∞—Ä—ã –¥–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è + –ø—Ä–µ–¥–º–µ—Ç –Ω–∞–¥ '-----', 2 –Ω–µ–¥–µ–ª—è ‚Äî —Ç–æ–ª—å–∫–æ –ø–∞—Ä—ã –¥–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
                        for j in range(len(day_pairs)):
                            subject, teacher, room, subgroup = split_subject_teacher(day_pairs[j])
                            room_final = room if room else (day_cabinets[j] if day_cabinets[j] and day_cabinets[j].lower() != 'nan' else '‚Äî')
                            lesson_dict = {
                                'lesson_number': j+1,
                                'time': day_times[j],
                                'subject': subject,
                                'teacher': teacher,
                                'room': room_final,
                                'subgroup': subgroup,
                                'week_number': 1 if j <= split_index else 2,
                                'is_subgroup': bool(subgroup),
                                'file_hash': file_hash
                            }
                            if j <= split_index:
                                week_lessons[1].append(lesson_dict)
                            else:
                                week_lessons[2].append(lesson_dict)
                    i += 1  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å '-----'
                else:
                    # –ù–µ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è ‚Äî –æ–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
                    for j in range(len(day_pairs)):
                        subject, teacher, room, subgroup = split_subject_teacher(day_pairs[j])
                        room_final = room if room else (day_cabinets[j] if day_cabinets[j] and day_cabinets[j].lower() != 'nan' else '‚Äî')
                        lesson_dict = {
                            'lesson_number': j+1,
                            'time': day_times[j],
                            'subject': subject,
                            'teacher': teacher,
                            'room': room_final,
                            'subgroup': subgroup,
                            'week_number': 1,
                            'is_subgroup': bool(subgroup),
                            'file_hash': file_hash
                        }
                        week_lessons[1].append(lesson_dict)
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å
            if current_day and (week_lessons[1] or week_lessons[2]):
                if not isinstance(schedule_data[group_col], dict):
                    schedule_data[group_col] = {}
                if current_day not in schedule_data[group_col]:
                    schedule_data[group_col][current_day] = {1: [], 2: []}
                schedule_data[group_col][current_day][1].extend(week_lessons[1])
                schedule_data[group_col][current_day][2].extend(week_lessons[2])
        _schedule_cache = schedule_data
        _schedule_cache_hash = file_hash
        return schedule_data
    except Exception:
        return {}

def fetch_replacements():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏ –ø–∞—Ä—Å–∏—Ç –∑–∞–º–µ–Ω—ã –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏"""
    try:
        try:
            headers = get_random_headers()
            resp = requests.get(REPLACEMENTS_URL, headers=headers)
            resp.raise_for_status()
        except requests.exceptions.RequestException as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∑–∞–º–µ–Ω: {e}")
            return {}

        if not resp.content:
            print("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª –∑–∞–º–µ–Ω")
            return {}
            
        try:
            doc = Document(BytesIO(resp.content))
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–∞–π–ª–∞ Word —Å –∑–∞–º–µ–Ω–∞–º–∏: {e}")
            return {}
        logging.info(f"–ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ –∑–∞–º–µ–Ω: {len(doc.tables)}")
        replacements_data = {}
        current_date = None
        if not doc.tables:
            print("–í –¥–æ–∫—É–º–µ–Ω—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü —Å –∑–∞–º–µ–Ω–∞–º–∏")
            return {}
            
        for table_idx, table in enumerate(doc.tables):
            try:
                logging.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –∑–∞–º–µ–Ω {table_idx}, –Ω–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫: {len(table.rows)}")
                
                if not table.rows:
                    logging.warning(f"–¢–∞–±–ª–∏—Ü–∞ –∑–∞–º–µ–Ω {table_idx} –ø—É—Å—Ç–∞")
                    continue
                    
                for row_idx, row in enumerate(table.rows):
                    try:
                        cells = [cell.text.strip() for cell in row.cells]
                        logging.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏ –∑–∞–º–µ–Ω {row_idx}: {cells}")

                        # –ü–æ–∏—Å–∫ –¥–∞—Ç—ã –≤ –ø–µ—Ä–≤–æ–π –∏–ª–∏ –≤—Ç–æ—Ä–æ–π —è—á–µ–π–∫–µ
                        date_candidate = None
                        for c in cells[:2]:
                            if c and "20" in c and "." in c and len(c) >= 8:
                                date_candidate = c
                                break
                        # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –¥–∞—Ç—É, –æ–±–Ω–æ–≤–ª—è–µ–º current_date –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É
                        if date_candidate:
                            current_date = date_candidate
                            print(f"–ù–∞–π–¥–µ–Ω–∞ –¥–∞—Ç–∞: {current_date}")
                            continue

                        # –ü—Ä–æ–ø—É—Å–∫ —Å—Ç—Ä–æ–∫ –±–µ–∑ –¥–∞—Ç—ã –∏ –±–µ–∑ –≥—Ä—É–ø–ø—ã
                        if not current_date:
                            # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≥—Ä—É–ø–ø—É, —ç—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
                            if not cells or not any(cells):
                                continue
                            # –ï—Å–ª–∏ –ø–µ—Ä–≤–∞—è —è—á–µ–π–∫–∞ –Ω–µ –ø–æ—Ö–æ–∂–∞ –Ω–∞ –≥—Ä—É–ø–ø—É, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                            group_candidate = cells[0].strip() if cells else ""
                            if not group_candidate or group_candidate.lower() in ["—à–∏—Ñ—Ä –≥—Ä—É–ø–ø—ã", ""]:
                                continue
                            # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞—Ç—ã, –Ω–æ –µ—Å—Ç—å –≥—Ä—É–ø–ø–∞, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º (–Ω–µ —Å–ø–∞–º–∏–º –ª–æ–≥)
                            continue

                        # –ü—Ä–æ–ø—É—Å–∫ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫
                        if not any(cells):
                            continue

                        # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –∑–∞–º–µ–Ω
                        # –û–∂–∏–¥–∞–µ—Ç—Å—è: [–≥—Ä—É–ø–ø–∞, ‚Ññ –ø–∞—Ä—ã, ‚Ññ –ø–∞—Ä—ã, –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞, –§–ò–û, ‚Ññ –ø–∞—Ä—ã, –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞, –§–ò–û, –∞—É–¥–∏—Ç–æ—Ä–∏—è]
                        # –ù–æ –∏–Ω–æ–≥–¥–∞ –±—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ 4 –∫–æ–ª–æ–Ω–∫–∏: [–≥—Ä—É–ø–ø–∞, ‚Ññ –ø–∞—Ä—ã, –ø—Ä–µ–¥–º–µ—Ç, –∫–∞–±–∏–Ω–µ—Ç]
                        group = cells[0].strip() if len(cells) > 0 else ""
                        if not group:
                            continue

                        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ä–∞–∑–±–æ—Ä: –∏—â–µ–º –≤—Å–µ –∑–∞–º–µ–Ω—ã –≤ —Å—Ç—Ä–æ–∫–µ (–º–æ–∂–µ—Ç –±—ã—Ç—å 2 –∑–∞–º–µ–Ω—ã –¥–ª—è –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã)
                        # –ü—Ä–∏–º–µ—Ä: ['–ë–¥-241', '3-4', '3-4', '–ú–î–ö.01.01', '–õ–∏—Ç–≤–∏–Ω–æ–≤–∞', '3-4', '–ò—Å—Ç–æ—Ä–∏—è –†–æ—Å—Å–∏–∏', '–õ—ã–∫–æ–≤–∞', '401-1\n404-1']
                        # –ü–µ—Ä–≤–∞—è –∑–∞–º–µ–Ω–∞: [1] –ø–∞—Ä–∞, [3] –ø—Ä–µ–¥–º–µ—Ç, [4] –§–ò–û, [8] –∞—É–¥–∏—Ç–æ—Ä–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
                        # –í—Ç–æ—Ä–∞—è –∑–∞–º–µ–Ω–∞: [5] –ø–∞—Ä–∞, [6] –ø—Ä–µ–¥–º–µ—Ç, [7] –§–ò–û, [8] –∞—É–¥–∏—Ç–æ—Ä–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
                        # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ 4 –∫–æ–ª–æ–Ω–∫–∏: [–≥—Ä—É–ø–ø–∞, –ø–∞—Ä–∞, –ø—Ä–µ–¥–º–µ—Ç, –∫–∞–±–∏–Ω–µ—Ç]

                        if group not in replacements_data:
                            replacements_data[group] = {}
                        if current_date not in replacements_data[group]:
                            replacements_data[group][current_date] = []

                        # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –¥–ª–∏–Ω–Ω–∞—è (–¥–≤–µ –∑–∞–º–µ–Ω—ã)
                        if len(cells) >= 8:
                            # –ü–µ—Ä–≤–∞—è –∑–∞–º–µ–Ω–∞
                            lesson1 = cells[1].strip()
                            subject1 = cells[3].strip()
                            teacher1 = cells[4].strip()
                            room1 = cells[8].strip() if len(cells) > 8 else ""
                            if subject1 and lesson1:
                                replacements_data[group][current_date].append({
                                    'lesson': lesson1,
                                    'subject': subject1,
                                    'teacher': teacher1,
                                    'room': room1,
                                })
                                logging.debug(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–µ—Ä–≤–∞—è –∑–∞–º–µ–Ω–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {group}")
                            # –í—Ç–æ—Ä–∞—è –∑–∞–º–µ–Ω–∞
                            lesson2 = cells[5].strip()
                            subject2 = cells[6].strip()
                            teacher2 = cells[7].strip()
                            room2 = cells[8].strip() if len(cells) > 8 else ""
                            if subject2 and lesson2:
                                replacements_data[group][current_date].append({
                                    'lesson': lesson2,
                                    'subject': subject2,
                                    'teacher': teacher2,
                                    'room': room2,
                                })
                                logging.debug(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –≤—Ç–æ—Ä–∞—è –∑–∞–º–µ–Ω–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {group}")
                        # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –æ–±—ã—á–Ω–∞—è (–æ–¥–Ω–∞ –∑–∞–º–µ–Ω–∞)
                        elif len(cells) >= 4:
                            lesson = cells[1].strip()
                            subject = cells[2].strip()
                            teacher = cells[3].strip() if len(cells) > 3 else ""
                            room = cells[4].strip() if len(cells) > 4 else ""
                            if subject and lesson:
                                replacements_data[group][current_date].append({
                                    'lesson': lesson,
                                    'subject': subject,
                                    'teacher': teacher,
                                    'room': room,
                                })
                                print(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–º–µ–Ω–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {group}")
                        # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –∫–æ—Ä–æ—Ç–∫–∞—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                        else:
                            continue

                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏ {row_idx}: {e}")
                        continue
                        
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–∞–±–ª–∏—Ü—ã {table_idx}: {e}")
                continue

        if not replacements_data:
            logging.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–º–µ–Ω–∞—Ö")
        else:
            logging.info(f"–ù–∞–π–¥–µ–Ω—ã –∑–∞–º–µ–Ω—ã –¥–ª—è –≥—Ä—É–ø–ø: {list(replacements_data.keys())}")
        return replacements_data
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–º–µ–Ω: {e}")
        return {}

def extract_groups_from_schedule():
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    try:
        schedule_data = fetch_schedule()
        if not schedule_data:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
            return []
            
        try:
            groups = list(schedule_data.keys())
            if not groups:
                return []
            cleaned_groups = []
            for group in groups:
                try:
                    group = str(group).strip()
                    if group and group not in ['–í—Ä–µ–º—è', '–î–∞—Ç–∞', '–î–µ–Ω—å', '']:
                        cleaned_groups.append(group)
                except (AttributeError, TypeError):
                    continue
            if not cleaned_groups:
                return []
            return sorted(list(set(cleaned_groups)))
        except Exception:
            return []
    except Exception:
        return []

# –î–ª—è —Ç–µ—Å—Ç–∞:
if __name__ == "__main__":
    schedule = fetch_schedule()
    for group, lessons in schedule.items():
        print(f"\n–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {group}:")
        for day in lessons:
            print(format_day_schedule(lessons, day))
    replacements = fetch_replacements()
    print(replacements)
    groups = extract_groups_from_schedule()
    print("–ù–∞–π–¥–µ–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã:", groups)
