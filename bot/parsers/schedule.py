import pandas as pd
import requests
from io import BytesIO
from docx import Document

SCHEDULE_URL = "https://www.nkptiu.ru/doc/raspisanie/raspisanie.xls"
REPLACEMENTS_URL = "https://www.nkptiu.ru/doc/raspisanie/zameni.docx"


def fetch_schedule():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏ –ø–∞—Ä—Å–∏—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"""
    try:
        resp = requests.get(SCHEDULE_URL)
        resp.raise_for_status()
        xls = BytesIO(resp.content)
        try:
            df = pd.read_excel(xls, engine='xlrd')
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è xls: {e}")
            print(f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(resp.content)} –±–∞–π—Ç")
            return {}
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å—Ç—Ä–æ–∫–∞ "–ü–†–ê–ö–¢–ò–ö–ò"
        practice_rows = df[df.iloc[:, 0] == "–ü–†–ê–ö–¢–ò–ö–ò"].index
        practice_data = {}
        
        if len(practice_rows) > 0:
            practice_start = practice_rows[0]
            # –ß–∏—Ç–∞–µ–º –ø—Ä–∞–∫—Ç–∏–∫–∏ –ø–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏ "–ü–†–ê–ö–¢–ò–ö–ò"
            for idx, row in df.iloc[practice_start+1:].iterrows():
                if pd.notna(row[0]) and str(row[0]).strip():
                    group = str(row[0]).strip()
                    practice_info = str(row[2]).strip() if len(row) > 2 and pd.notna(row[2]) else ""
                    if group and practice_info and group != "–ü–†–ê–ö–¢–ò–ö–ò":
                        practice_data[group] = practice_info
        
        print("df.head():", df.head())
        print("df.columns:", df.columns)
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–ø—É—Å–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ (–∏–Ω—Ç–µ—Ä–≤–∞–ª–∞)
        if '–ò–Ω—Ç–µ—Ä–≤–∞–ª' in df.columns:
            df['–ò–Ω—Ç–µ—Ä–≤–∞–ª'] = df['–ò–Ω—Ç–µ—Ä–≤–∞–ª'].fillna(method='ffill')
            
        schedule_data = {}
        # –ì—Ä—É–ø–ø—ã –∏–¥—É—Ç —á–µ—Ä–µ–∑ –æ–¥–∏–Ω —Å—Ç–æ–ª–±–µ—Ü: [–ì—Ä—É–ø–ø–∞, Unnamed, –ì—Ä—É–ø–ø–∞, Unnamed, ...]
        group_cols = [col for col in df.columns if '-' in str(col)]
        
        for group_col in group_cols:
            schedule_data[group_col] = []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ –ª–∏ –≥—Ä—É–ø–ø–∞
            if group_col in practice_data:
                schedule_data[group_col] = [{'is_practice': True, 'practice_info': practice_data[group_col]}]
                continue
                
            # –ò–Ω–¥–µ–∫—Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏ –∫–∞–±–∏–Ω–µ—Ç–∞
            subj_idx = df.columns.get_loc(group_col)
            teacher_idx = subj_idx + 1
            room_idx = subj_idx + 2
            
            for idx, row in df.iterrows():
                if idx >= practice_start if len(practice_rows) > 0 else False:
                    break
                    
                lesson_number = idx + 1
                time = row.get('–ò–Ω—Ç–µ—Ä–≤–∞–ª', '')
                subject = row.get(group_col, '')
                teacher = row.get(df.columns[teacher_idx], '') if teacher_idx < len(df.columns) else ''
                room = row.get(df.columns[room_idx], '') if room_idx < len(df.columns) else ''
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                if pd.notna(subject) and str(subject).strip() and str(subject).strip().lower() != 'nan':
                    schedule_data[group_col].append({
                        'lesson_number': lesson_number,
                        'time': str(time).strip(),
                        'subject': str(subject).strip(),
                        'teacher': str(teacher).strip(),
                        'room': str(room).strip(),
                        'is_practice': False
                    })
        print("schedule_data.keys():", list(schedule_data.keys()))
        return schedule_data
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
        return {}

def fetch_replacements():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏ –ø–∞—Ä—Å–∏—Ç –∑–∞–º–µ–Ω—ã –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏"""
    try:
        resp = requests.get(REPLACEMENTS_URL)
        resp.raise_for_status()
        doc = Document(BytesIO(resp.content))
        print(f"doc.tables: {len(doc.tables)} —Ç–∞–±–ª–∏—Ü")
        replacements_data = {}
        current_date = None
        for table_idx, table in enumerate(doc.tables):
            print(f"–¢–∞–±–ª–∏—Ü–∞ {table_idx}, —Å—Ç—Ä–æ–∫: {len(table.rows)}")
            for row_idx, row in enumerate(table.rows):
                cells = [cell.text.strip() for cell in row.cells]
                print(f"Row {row_idx}: {cells}")
                if len(cells) >= 1 and "20" in cells[0]:
                    current_date = cells[0]
                    continue
                if not any(cells):
                    continue
                if len(cells) >= 4:
                    group = cells[0].strip()
                    if group:
                        if group not in replacements_data:
                            replacements_data[group] = {}
                        if current_date not in replacements_data[group]:
                            replacements_data[group][current_date] = []
                        replacement = {
                            'lesson': cells[1],
                            'subject': cells[2],
                            'room': cells[3]
                        }
                        replacements_data[group][current_date].append(replacement)
        print("replacements_data.keys():", list(replacements_data.keys()))
        return replacements_data
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–º–µ–Ω: {e}")
        return {}

def extract_groups_from_schedule():
    try:
        schedule_data = fetch_schedule()
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –∏–∑ –∫–ª—é—á–µ–π —Å–ª–æ–≤–∞—Ä—è
        groups = list(schedule_data.keys())
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –æ—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø
        cleaned_groups = []
        for group in groups:
            group = str(group).strip()
            if group and group not in ['–í—Ä–µ–º—è', '–î–∞—Ç–∞', '–î–µ–Ω—å', '']:
                cleaned_groups.append(group)
        return sorted(list(set(cleaned_groups)))  # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –≥—Ä—É–ø–ø: {e}")
        return []

# –î–ª—è —Ç–µ—Å—Ç–∞:

def format_schedule_for_group(group_lessons):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã –≤ –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è Telegram.
    group_lessons: —Å–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç–∏–π (dict —Å –∫–ª—é—á–∞–º–∏ lesson_number, time, subject, teacher, room)
    """
    from .lesson_times import LESSON_TIMES, WEEKDAY_TIMES, SATURDAY_TIMES, get_schedule_string
    from datetime import datetime
    
    if not group_lessons:
        return "‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ –ª–∏ –≥—Ä—É–ø–ø–∞
    if len(group_lessons) == 1 and group_lessons[0].get('is_practice', False):
        practice_info = group_lessons[0].get('practice_info', '')
        return f"‚ö°Ô∏è –ì–†–£–ü–ü–ê –ù–ê –ü–†–ê–ö–¢–ò–ö–ï ‚ö°Ô∏è\n\nüìù {practice_info}"
        
    weekday = datetime.now().weekday()
    schedule_header = get_schedule_string(weekday)
    
    # –í—ã–±–∏—Ä–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–Ω—è –Ω–µ–¥–µ–ª–∏
    if weekday == 0:  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
        times_dict = LESSON_TIMES
    elif weekday == 5:  # –°—É–±–±–æ—Ç–∞
        times_dict = SATURDAY_TIMES
    else:  # –í—Ç–æ—Ä–Ω–∏–∫-–ø—è—Ç–Ω–∏—Ü–∞
        times_dict = WEEKDAY_TIMES
    
    # –°–≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–∞—Ä—ã –ø–æ –Ω–æ–º–µ—Ä–∞–º
    lessons_by_number = {}
    for lesson in group_lessons:
        time = lesson.get('time', '')
        if time not in lessons_by_number:
            lessons_by_number[time] = []
        lessons_by_number[time].append(lesson)
    
    lines = [schedule_header, "\n", "üìÖ –†–ê–°–ü–ò–°–ê–ù–ò–ï –ó–ê–ù–Ø–¢–ò–ô\n"]
    
    for time, lessons in sorted(lessons_by_number.items()):
        if not time:
            continue
            
        lesson_num = time.split()[0]  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –ø–∞—Ä—ã –∏–∑ "1 –ø–∞—Ä–∞"
        lines.append(f"{'_' * 7} –ó–∞–Ω—è—Ç–∏–µ ‚Ññ{lesson_num} {'_' * 7}")
        lines.append(f"         ‚è∞¬´{times_dict.get(time, '–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ')}¬ª\n")
        
        for lesson in lessons:
            subject = lesson.get('subject', '').strip()
            teacher = lesson.get('teacher', '').strip()
            room = lesson.get('room', '').strip()
            
            if subject and subject != "-----":
                lines.append(f"üìö –ü—Ä–µ–¥–º–µ—Ç: {subject}")
                if teacher:
                    lines.append(f"üë§ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {teacher}")
                if room:
                    lines.append(f"üö™ –ö–∞–±–∏–Ω–µ—Ç: {room}")
                lines.append("")
        lines.append("")
    
    return '\n'.join(lines)

# –î–ª—è —Ç–µ—Å—Ç–∞:
if __name__ == "__main__":
    schedule = fetch_schedule()
    for group, lessons in schedule.items():
        print(f"\n–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {group}:")
        print(format_schedule_for_group(lessons))
    replacements = fetch_replacements()
    print(replacements)
    groups = extract_groups_from_schedule()
    print("–ù–∞–π–¥–µ–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã:", groups)
